""" Hybrid-DFT Response-Related Utilities. """

from pyscf.dh import RHDFT
from pyscf.scf import _response_functions  # this import is not unnecessary
from functools import cached_property


def Ax0_Core_resp(sp, sq, sr, ss, vresp, mo_coeff):
    r""" Convenient function for evaluation of Fock response in MO basis
    :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}` by PySCF's response function.

    Parameters
    ----------
    sp, sq, sr, ss : slice or list
        Slice of molecular orbital indices.
    vresp : callable
        Fock response function in AO basis (generated by ``mf.scf.gen_response``).
    mo_coeff : np.ndarray
        Molecular orbital coefficients.

    Returns
    -------
    callable
        A function where input is :math:`X_{rs}^\mathbb{A}`, and output is
        :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}`.
    """
    C = mo_coeff

    def Ax0_Core_resp_inner(X):
        X_shape = X.shape
        X = X.reshape((-1, X_shape[-2], X_shape[-1]))
        dmX = C[:, sr] @ X @ C[:, ss].T
        dmX += dmX.swapaxes(-1, -2)
        ax_ao = vresp(dmX)
        res = 2 * C[:, sp].T @ ax_ao @ C[:, sq]
        res.shape = list(X_shape[:-2]) + [res.shape[-2], res.shape[-1]]
        return res

    return Ax0_Core_resp_inner


class RHDFTResp(RHDFT):

    @cached_property
    def vresp(self):
        """ Fock response function (derivative w.r.t. molecular coefficient in AO basis). """
        return self.scf.gen_response()

    def Ax0_Core(self, sp, sq, sr, ss):
        r""" Convenient function for evaluation of Fock response in MO basis
        :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}`.

        Parameters
        ----------
        sp, sq, sr, ss : slice or list
            Slice of molecular orbital indices.

        Returns
        -------
        callable
            A function where input is :math:`X_{rs}^\mathbb{A}`, and output is
            :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}`.

        Notes
        -----
        This function acts as a wrapper of various possible Fock response algorithms.

        TODO: Functionality of this method is to be implemented.
        """
        # currently we just implemented response by PySCF
        return self.Ax0_Core_resp(sp, sq, sr, ss)

    def Ax0_Core_resp(self, sp, sq, sr, ss, vresp=None, mo_coeff=None):
        r""" Convenient function for evaluation of Fock response in MO basis
        :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}` by PySCF's response function.

        Parameters
        ----------
        sp, sq, sr, ss : slice or list
            Slice of molecular orbital indices.
        vresp : callable
            Fock response function in AO basis (generated by ``mf.scf.gen_response``).
        mo_coeff : np.ndarray
            Molecular orbital coefficients.

        Returns
        -------
        callable
            A function where input is :math:`X_{rs}^\mathbb{A}`, and output is
            :math:`\sum_{rs} A_{pq, rs} X_{rs}^\mathbb{A}`.

        Notes
        -----
        This function calls PySCF's gen_response function. For cases that requires large virtual contraction
        (such as :math:`A_{ai, pq} X_{pq}`), this function should be somehow quicker.
        """
        vresp = vresp if vresp is not None else self.vresp
        mo_coeff = mo_coeff if mo_coeff is not None else self.mo_coeff
        return Ax0_Core_resp(sp, sq, sr, ss, vresp, mo_coeff)
